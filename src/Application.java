/*
 * СОЗДАНИЕ ОБЬЕКТОВ
 * 
 * Класс является шаблоном для создаваемых обьектов
 * 
 * Инициализация обьекта состоит из трех частей:
 * 1. Объявление (Declaration) - тип обьекта + имя переменной
 * 2. Определение (Instantiation) - ключевое слово new, оператор Java, который создает объект.
 * 3. Инициализация (Initialization) - за new оператором следует вызов конструктора, который инициализирует новый объект.
 * Пример:
 * Point originOne = new Point(23, 94);
 * 
 * Объявление переменной для ссылки на объект
 * Простое объявление ссылочной переменной не создает объект.
 * 
 * Создание класса
 * Оператор new создает экземпляр класса, выделяя память для нового объекта и возвращая ссылку на эту память. 
 * Ссылка обычно присваивается переменной соответствующего типа
 * Оператор new также вызывает конструктор объекта.
 * Фраза «создание экземпляра класса» (instantiating a class) означает то же самое, что и «создание объекта» (creating an object). 
 * Когда вы создаете объект, вы создаете «экземпляр» класса, следовательно, «создаете» экземпляр класса.
 * 
 * Ссылка, возвращаемая оператором new, не обязательно должна присваиваться переменной. 
 * Она также может быть использоваан непосредственно в выражении. 
 * Например:
 * int height = new Rectangle().height;
 * Обратите внимание, что после того, как этот оператор был выполнен, программа больше не имеет ссылки на созданный обьект,
 * потому что программа никогда нигде не хранила ссылку на него
 * 
 * Инициалзиация обьекта
 * Если класс имеет несколько конструкторов, они должны иметь разные сигнатуры
 * Конструктор не принимающий  никаких аргументов, называется конструктором без аргументов (no-argument constructor)
 * 
 * ИСПОЛЬЗОВАНИЕ ОБЬЕКТОВ
 * 
 * Ссылка на поля объекта
 * Для доступа к полям класса можно использовать обычное простое имя
 * Например:
 * System.out.println("Width and height are: " + width + ", " + height);
 * 
 * Код, находящийся вне класса объекта, должен использовать ссылку на объект или выражение, 
 * за которым следует оператор точки (.), за которым следует простое имя поля
 * Например:
 * objectReference.fieldName
 * 
 * Вызов методов объекта
 * 
 * Для вызова метода используются следующий синтаксис:
 * objectReference.methodName(argumentList);
 * или без аргумента
 * objectReference.methodName();
 * 
 * Можно также использовать метод, для возращения значения поля
 * new Rectangle(100, 50).getArea()
 * 
 * Сборщик мусора (Garbage Collector)
 * Среда выполнения Java (Java Runtime Envirement) удаляет объекты, когда определяет, что они больше не используются.
 * Вы можете явно удалить ссылку на объект, установив для переменной специальное значение null
 */


/* ПРИМЕРЫ КОДОВ
 * 
 * 1. Практика с созданием обьектов и конструторов
 *    - Создаем класс координат прямоуголника Point
 *      - два int поля x/y равные 0
 *      - создаем конструктор для перееменных
 *    - Создаем класс прямоугольника Rectengle
 *      - два int поля ширины и высоты (with/height) равные 0
 *      - поле, типа класса Point origin (координаты прямогульника)
 *      - четыре конструктора
 *        - конструктор, задающий начальные кординаты прямоугольника x/y = 0;
 *        - конструктор, задающий координаты прямоугольнику
 *        - конструктор, задающий ширину/высоту прямоугольника, а также нач. координаты x/y = 0;
 *        - конструктор, задающий ширину/высоту прямогульника, а также его координаты
 *      - метод move(), позволяющий изменить координаты прямоугольника
 *      - метод getArea() возращающий площадь прямоугольника
 *    - Обьявляем и определяем обьекты в осн.файле
 *      - Создаем обьект originOne, указывающий нач.коордианты прямогульника
 *      - Создаем обьект rectOne, указывающий нач.координаты + ширину/высоту прямоугольника
 *      - Создаем обьект rectTwo, указывающий ширину/высоту прямоугольника + нач.координаты x/y = 0
 *     
 *      - Выводим в консоль ширину/высоту а также площадь первого прямогульника
 *      - Меняем координаты у второго прямогульника (присваиваем обьекту originOne)      
 *      - Выводим в консоль координаты x/y второго прямоугольника
 *      - Изменяем текущие коордианты второго прямоугольника и выводим их в консоль
 * 
 */


public class Application {
	public static void main(String[] args) {
		Point originOne = new Point(20, 30);
		Rectengle rectOne = new Rectengle(originOne, 30, 50);
		Rectengle rectTwo = new Rectengle(30, 50);
		
		System.out.println("Ширина 1ого прямоугольника равна " + rectOne.width);
		System.out.println("Высота 1ого прямоугольника равна " + rectOne.height);
		System.out.println("Площать 1ого прямоугольника равна " + rectOne.getArea());
		System.out.println();
		
		rectOne.origin = originOne;
		
		System.out.println("Координаты 2ого прямоугольника по X равны = " + rectOne.origin.x);
		System.out.println("Координаты 2ого прямоугольника по Y равны = " + rectOne.origin.y);
		System.out.println();
		
		rectOne.move(10, 20);
		System.out.println("Координаты 2ого прямоугольника по X равны = " + rectOne.origin.x);
		System.out.println("Координаты 2ого прямоугольника по Y равны = " + rectOne.origin.y);
		
	}
}