/*
 * АНОНИМНЫЕ КЛАССЫ
 * Анонимные классы позволяют сделать ваш код более лаконичным. Они позволяют вам одновременно объявлять и создавать экземпляр класса
 * Они как и локальные классы, за исключением того, что они не имеют имени. Используйте их если Вам необходимо использовать локальный класс тольк один раз
 * 
 * ОБЬЯВЛЕНИЕ АНОНИМНЫХ КЛАССОВ
 * Анонимные классы - выражения, это означает что они определяются в классе в другом выражении
 * 
 * СИНТАКСИС АНОНИМНОГО КЛАССА
 * Синтаксис выражения анонимного класса аналогичен вызову конструктора, за исключением того, что в блоке кода содержится определение класса.
 * 
 *  Анонимный классс состоит из следующего:
 *  - Оператора new
 *  - Имя интерфейса или класса для расширения.
 *  - Круглые скобки, которые содержат аргументы конструктора, так же как и обычное выражение создания экземпляра класса
 *  - Тело, которое является телом объявления класса.
 * 
 *  Поскольку определение анонимного класса является выражением, оно должно быть частью statement.
 *  
 *  ДОСТУП К ЛОКАЛЬНЫМ ПЕРЕМЕННЫМ ВХОДЯЩЕЙ ОБЛАСТИ, А ТАКЖЕ ОБЬЯВЛЕНИЕ И ДОСТУП К ЧЛЕНАМ АНОНИМНОГО КЛАССА
 *  
 *  Как и локальные классы, anonymous classes имеют одинаковый доступ к локальным переменным окружения:
 *  - aнонимный класс имеет доступ к членам своего включающего класса
 *  - aнонимный класс не может получить доступ к локальным переменным в своей области видимости, которые не объявлены как окончательные или фактически окончательные.
 *  - Подобно вложенному классу, объявление типа (такого как переменная) в анонимном классе затеняет (shadowing) любые другие объявления во вложенной области видимости, которые имеют то же имя.
 *  
 *  Анонимные классы также имеют те же ограничения, что и локальные классы в отношении своих членов
 *  - Вы не можете объявлять статические инициализаторы или интерфейсы-члены в анонимном классе
 *  - Анонимный класс может иметь статические члены при условии, что они являются постоянными переменными.
 *  
 *  Обратите внимание, что вы можете объявить следующее в анонимных классах
 *  - Поля
 *  - Дополнительные методы (даже если они не внедряют методы супертипа)
 *  - Инициализаторы экземпляра
 *  - Локальные классы
 *  - Однако, вы не можете обьявить конструтор в анонимном классе
 *  
 *  Анонимные классы часто используются в приложениях с графическим пользовательским интерфейсом (GUI).
 *  
 */


/*
 * ОТРЫВКИ КОДА
 * 
 * Пример обьявления анонимного класса:
 * 
 * - Создаем класс HelloWorldAnonymousClasses
 *   - Создаем интерфейс HelloWorld
 *     - публичный метод void greet()
 *     - публичный метод void greetSomeone(String someone);
 *     
 *   - Публичный метод sayHello()
 *     - класс EnglishGreeting расширеный НelloWorld
 *       - переменная типа String "world"
 *       - метод greet()
 *         - инициализируем метод greetSomeone
 *       - метод greetSomeone(String someone)
 *         - name = someone
 *         - sysout("Hello " + name);
 *     - переменная englishGreeting типа HelloWorld инициализирующая  EnglishGreeting()
 *     
 *     - переменная frenchGreeting типа HelloWorld инициализирующая анонимный класс HelloWorld()
 *      - по принципу класса EnglishGreeting
 *      
 *     - переменная spanishGreeting типа HelloWorld инициализирующая анонимный класс HelloWorld()
 *      - по принципу класса EnglishGreeting
 *      
 *     - Инициализатся методов перменных
 *       - englishGreeting
 *       - frenchGreeting
 *       - spanishGreeting
 *       
 *   - В main методе
 *     - инициализируем класс HelloWorldAnonymousClasses
 *     - вызываем метод sayHello()   
 * 
 */

public class Application {
	
	interface HelloWorld {
		void greet();
		void greetSomeone(String someone);
	}
	
	public void sayHello() {
	
		class EnglishGreeting implements HelloWorld {
			String name = "world";
			public void greet() {
				greetSomeone("world");
			}
			public void greetSomeone(String someone) {
				System.out.println("Hello " + name);
			}
		}
		
		// без внутренного класса
		EnglishGreeting englishGreeting = new EnglishGreeting();
		
		// c внутренним классом
		HelloWorld frenchGreeting = new HelloWorld() {
			String name = "tout le monde";
			public void greet() {
				greetSomeone("tout le monde");
			}
			public void greetSomeone(String someone) {
				name = someone;
				System.out.println("Salut, " + name);	
			}
		};
		
		englishGreeting.greet();
		frenchGreeting.greetSomeone("Fred");
		
	}
	
	public static void main(String[] args) {
		Application myApp = new Application();
	    myApp.sayHello();
	}
	
}